"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:ban-types
const http_request_options_1 = require("./http-request-options");
const named_values_1 = require("./named-values");
require("reflect-metadata");
const url_1 = require("url");
/**
 * Abstract base class for the REST clients.
 */
class RestClient {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.requestInterceptor = null;
    }
    /**
     * Returns the base of the REST API URL.
     */
    getBaseUrl() {
        return null;
    }
    /**
     * Returns the default HTTP headers attached to each request.
     */
    getDefaultHeaders() {
        return null;
    }
}
exports.RestClient = RestClient;
/**
 * Sets the default HTTP headers attached to each request to the REST API.
 * Intended to use as a decorator: @DefaultHeaders({'Header': 'value', 'Header2': 'value'}
 * @param headers   The headers in key-value pairs.
 */
function DefaultHeaders(headers) {
    return function (Target) {
        Target.prototype.getDefaultHeaders = function () {
            return headers;
        };
        return Target;
    };
}
exports.DefaultHeaders = DefaultHeaders;
/**
 * Sets the base URL of the REST API.
 * Intended to use as a decorator: @BaseUrl("http://...")
 * @param url   the base URL.
 */
function BaseUrl(url) {
    return function (Target) {
        Target.prototype.getBaseUrl = function () {
            return url;
        };
        return Target;
    };
}
exports.BaseUrl = BaseUrl;
var EnumRestClientMetadata;
(function (EnumRestClientMetadata) {
    EnumRestClientMetadata["PARAM_PATH"] = "Path";
    EnumRestClientMetadata["PARAM_QUERY"] = "Query";
    EnumRestClientMetadata["PARAM_BODY"] = "Body";
    EnumRestClientMetadata["PARAM_HEADER"] = "Header";
    EnumRestClientMetadata["METHOD"] = "METHOD";
    EnumRestClientMetadata["METHOD_GET"] = "GET";
    EnumRestClientMetadata["METHOD_POST"] = "POST";
    EnumRestClientMetadata["METHOD_PUT"] = "PUT";
    EnumRestClientMetadata["METHOD_PATCH"] = "PATCH";
    EnumRestClientMetadata["METHOD_DELETE"] = "DELETE";
    EnumRestClientMetadata["METHOD_HEAD"] = "HEAD";
})(EnumRestClientMetadata = exports.EnumRestClientMetadata || (exports.EnumRestClientMetadata = {}));
function getRestClientMethodMetadata(metadataKey, target, propertyKey) {
    return Reflect.getMetadata(metadataKey, target, propertyKey);
}
exports.getRestClientMethodMetadata = getRestClientMethodMetadata;
function setRestClientMethodMetadata(metadataKey, target, propertyKey, metadataValue) {
    return Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);
}
exports.setRestClientMethodMetadata = setRestClientMethodMetadata;
function paramBuilder(paramName) {
    return function (key) {
        return function (target, propertyKey, parameterIndex) {
            //const metadataKey = `${String(propertyKey)}_${paramName}_parameters`;
            const paramObj = {
                key,
                parameterIndex,
            };
            let arr = getRestClientMethodMetadata(paramName, target, propertyKey);
            if (Array.isArray(arr)) {
                arr.push(paramObj);
            }
            else {
                arr = [paramObj];
            }
            setRestClientMethodMetadata(paramName, target, propertyKey, arr);
        };
    };
}
/**
 * Path variable of a method's URL, type: string.
 * @param key   path key to bind value.
 */
exports.Path = paramBuilder("Path" /* PARAM_PATH */);
/**
 * Query value of a method's URL, type: string.
 * @param key   query key to bind value.
 */
exports.Query = paramBuilder("Query" /* PARAM_QUERY */);
/**
 * Body of a REST method, type: key-value pair object.
 * Only one body per method!
 */
exports.Body = paramBuilder("Body" /* PARAM_BODY */)('Body');
/**
 * Custom header of a REST method, type: string.
 * @param key   header key to bind value.
 */
exports.Header = paramBuilder("Header" /* PARAM_HEADER */);
/**
 * Set custom headers for a REST method.
 * @param headersDef    custom headers in key-value pairs.
 */
function Headers(headersDef) {
    return function (_target, _propertyKey, descriptor) {
        // @ts-ignore
        descriptor.headers = headersDef;
        return descriptor;
    };
}
exports.Headers = Headers;
function methodBuilder(method) {
    return function (url) {
        return function (target, propertyKey, descriptor) {
            //const pPath = target[`${propertyKey}_Path_parameters`] as Parameter[];
            //const pQuery = target[`${propertyKey}_Query_parameters`] as Parameter[];
            //const pBody = target[`${propertyKey}_Body_parameters`] as Parameter[];
            //const pHeader = target[`${propertyKey}_Header_parameters`] as Parameter[];
            const pPath = getRestClientMethodMetadata("Path" /* PARAM_PATH */, target, propertyKey);
            const pQuery = getRestClientMethodMetadata("Query" /* PARAM_QUERY */, target, propertyKey);
            const pBody = getRestClientMethodMetadata("Body" /* PARAM_BODY */, target, propertyKey);
            const pHeader = getRestClientMethodMetadata("Header" /* PARAM_HEADER */, target, propertyKey);
            const oldFn = descriptor.value;
            setRestClientMethodMetadata("METHOD" /* METHOD */, target, propertyKey, method);
            descriptor.value = function (...args) {
                let body = null;
                if (pBody) {
                    body = JSON.stringify(args[pBody[0].parameterIndex]);
                }
                let resUrl = url;
                if (pPath) {
                    for (const k in pPath) {
                        if (pPath.hasOwnProperty(k)) {
                            resUrl = resUrl.replace('{' + pPath[k].key + '}', args[pPath[k].parameterIndex]);
                        }
                    }
                }
                const params = new named_values_1.NamedValues();
                if (pQuery) {
                    pQuery
                        .filter(p => args[p.parameterIndex])
                        .forEach(p => {
                        const key = p.key;
                        let value = args[p.parameterIndex];
                        if (value instanceof Object) {
                            value = JSON.stringify(value);
                        }
                        params.set(key, value);
                    });
                }
                const headers = new named_values_1.NamedValues(this.getDefaultHeaders());
                for (const k in descriptor.headers) {
                    if (descriptor.headers.hasOwnProperty(k)) {
                        headers.set(k, descriptor.headers[k]);
                    }
                }
                if (pHeader) {
                    for (const k in pHeader) {
                        if (pHeader.hasOwnProperty(k)) {
                            headers.set(pHeader[k].key, args[pHeader[k].parameterIndex]);
                        }
                    }
                }
                const finalUrl = url_1.resolve(this.getBaseUrl(), resUrl);
                let request = new http_request_options_1.HttpRequestOptions(finalUrl, method, body, headers, params);
                if (this.requestInterceptor) {
                    request = this.requestInterceptor(request);
                }
                // @ts-ignore
                const oldTransformResponse = request.transformResponse;
                // @ts-ignore
                request.transformResponse = function (data) {
                    let ret = oldFn(oldTransformResponse ? oldTransformResponse.call(this, data) : data);
                    if (ret == null) {
                        return data;
                    }
                    return ret;
                };
                return this.httpClient.request(request);
            };
        };
    };
}
exports.methodBuilder = methodBuilder;
/**
 * GET method.
 * @param url   resource URL of the method
 */
exports.GET = methodBuilder("GET" /* METHOD_GET */);
/**
 * POST method.
 * @param url   resource URL of the method
 */
exports.POST = methodBuilder("POST" /* METHOD_POST */);
/**
 * PUT method.
 * @param url   resource URL of the method
 */
exports.PUT = methodBuilder("PUT" /* METHOD_PUT */);
/**
 * PATCH method.
 * @param url   resource URL of the method
 */
exports.PATCH = methodBuilder("PATCH" /* METHOD_PATCH */);
/**
 * DELETE method.
 * @param url   resource URL of the method
 */
exports.DELETE = methodBuilder("DELETE" /* METHOD_DELETE */);
/**
 * HEAD method.
 * @param url   resource URL of the method
 */
exports.HEAD = methodBuilder("HEAD" /* METHOD_HEAD */);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC1jbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXN0LWNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJCQUEyQjtBQUMzQixpRUFBd0U7QUFFeEUsaURBQXdEO0FBQ3hELDRCQUEwQjtBQUMxQiw2QkFBNkM7QUFZN0M7O0dBRUc7QUFDSCxNQUFzQixVQUFVO0lBRzlCLFlBQVksVUFBdUI7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztJQUNqQyxDQUFDO0lBU0Q7O09BRUc7SUFDTyxVQUFVO1FBQ2xCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVEOztPQUVHO0lBQ08saUJBQWlCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBNUJELGdDQTRCQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixjQUFjLENBQUMsT0FBa0I7SUFDL0MsT0FBTyxVQUFrQyxNQUFhO1FBQ3BELE1BQU0sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEdBQUc7WUFDbkMsT0FBTyxPQUFPLENBQUM7UUFDakIsQ0FBQyxDQUFDO1FBRUYsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQVJELHdDQVFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLE9BQU8sQ0FBQyxHQUFXO0lBQ2pDLE9BQU8sVUFBa0MsTUFBYTtRQUNwRCxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRztZQUM1QixPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUMsQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztBQUNKLENBQUM7QUFQRCwwQkFPQztBQUVELElBQWtCLHNCQWdCakI7QUFoQkQsV0FBa0Isc0JBQXNCO0lBRXRDLDZDQUFtQixDQUFBO0lBQ25CLCtDQUFxQixDQUFBO0lBQ3JCLDZDQUFtQixDQUFB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Q0FBQyxpQkFBaUIsQ0FBQztnQkFFdkQsYUFBYTtnQkFDYixPQUFPLENBQUMsaUJBQWlCLEdBQUcsVUFBVSxJQUFJO29CQUV4QyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNyRixJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQ2Y7d0JBQ0UsT0FBTyxJQUFJLENBQUM7cUJBQ2I7b0JBQ0QsT0FBTyxHQUFHLENBQUM7Z0JBQ2IsQ0FBQyxDQUFDO2dCQUVGLE9BQVEsSUFBSSxDQUFDLFVBQTBCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNELENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztBQUNKLENBQUM7QUFwRkQsc0NBb0ZDO0FBRUQ7OztHQUdHO0FBQ1UsUUFBQSxHQUFHLEdBQUcsYUFBYSx3QkFBbUMsQ0FBQztBQUVwRTs7O0dBR0c7QUFDVSxRQUFBLElBQUksR0FBRyxhQUFhLDBCQUFvQyxDQUFDO0FBRXRFOzs7R0FHRztBQUNVLFFBQUEsR0FBRyxHQUFHLGFBQWEsd0JBQW1DLENBQUM7QUFFcEU7OztHQUdHO0FBQ1UsUUFBQSxLQUFLLEdBQUcsYUFBYSw0QkFBcUMsQ0FBQztBQUV4RTs7O0dBR0c7QUFDVSxRQUFBLE1BQU0sR0FBRyxhQUFhLDhCQUFzQyxDQUFDO0FBRTFFOzs7R0FHRztBQUNVLFFBQUEsSUFBSSxHQUFHLGFBQWEsMEJBQW9DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8vIHRzbGludDpkaXNhYmxlOmJhbi10eXBlc1xuaW1wb3J0IHsgSHR0cE1ldGhvZCwgSHR0cFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi9odHRwLXJlcXVlc3Qtb3B0aW9ucyc7XG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJy4vaHR0cC1zZXJ2aWNlJztcbmltcG9ydCB7IE5hbWVkVmFsdWVzLCBTdHJpbmdNYXAgfSBmcm9tICcuL25hbWVkLXZhbHVlcyc7XG5pbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhXCI7XG5pbXBvcnQgeyByZXNvbHZlIGFzIHVybF9yZXNvbHZlIH0gZnJvbSAndXJsJztcblxuaW50ZXJmYWNlIFBhcmFtZXRlciB7XG4gIGtleTogc3RyaW5nO1xuICBwYXJhbWV0ZXJJbmRleDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEFuIGludGVyY2VwdG9yIGlzIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyB0aGUgcHJlcGFyZWQgSFRUUCByZXF1ZXN0IGRhdGEgYW5kIHJldHVybnMgdGhlbSBtb2RpZmllZC5cbiAqL1xuZXhwb3J0IHR5cGUgSHR0cFJlcXVlc3RJbnRlcmNlcHRvciA9IDxUIGV4dGVuZHMgSHR0cFJlcXVlc3RPcHRpb25zLCBVPihyZXF1ZXN0OiBUKSA9PiBVO1xuXG4vKipcbiAqIEFic3RyYWN0IGJhc2UgY2xhc3MgZm9yIHRoZSBSRVNUIGNsaWVudHMuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZXN0Q2xpZW50IHtcbiAgcHJvdGVjdGVkIGh0dHBDbGllbnQ6IEh0dHBTZXJ2aWNlO1xuXG4gIGNvbnN0cnVjdG9yKGh0dHBDbGllbnQ6IEh0dHBTZXJ2aWNlKSB7XG4gICAgdGhpcy5odHRwQ2xpZW50ID0gaHR0cENsaWVudDtcbiAgICB0aGlzLnJlcXVlc3RJbnRlcmNlcHRvciA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCBpbnRlcmNlcHRvciBhbGxvd2luZyB0byBtb2RpZml5IHRoZSBjb2xsZWN0ZWQgcmVxdWVzdCBkYXRhIGJlZm9yZSBzZW5kaW5nIGl0LlxuICAgKiBUeXBpY2FsIHVzZSBpcyB0aGUgaW5zZXJ0aW9uIG9mIGFuIGF1dGhvcml6YXRpb24gdG9rZW4gdG8gdGhlIHJlcXVlc3QgaGVhZGVycy5cbiAgICogTGVhdmUgbnVsbCBpZiB5b3UgZG9uJ3Qgd2FudCB0byB1c2UgaXQuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVxdWVzdEludGVyY2VwdG9yOiBIdHRwUmVxdWVzdEludGVyY2VwdG9yIHwgbnVsbDtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYmFzZSBvZiB0aGUgUkVTVCBBUEkgVVJMLlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldEJhc2VVcmwoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGVmYXVsdCBIVFRQIGhlYWRlcnMgYXR0YWNoZWQgdG8gZWFjaCByZXF1ZXN0LlxuICAgKi9cbiAgcHJvdGVjdGVkIGdldERlZmF1bHRIZWFkZXJzKCk6IFN0cmluZ01hcCB8IG51bGwge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogU2V0cyB0aGUgZGVmYXVsdCBIVFRQIGhlYWRlcnMgYXR0YWNoZWQgdG8gZWFjaCByZXF1ZXN0IHRvIHRoZSBSRVNUIEFQSS5cbiAqIEludGVuZGVkIHRvIHVzZSBhcyBhIGRlY29yYXRvcjogQERlZmF1bHRIZWFkZXJzKHsnSGVhZGVyJzogJ3ZhbHVlJywgJ0hlYWRlcjInOiAndmFsdWUnfVxuICogQHBhcmFtIGhlYWRlcnMgICBUaGUgaGVhZGVycyBpbiBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBEZWZhdWx0SGVhZGVycyhoZWFkZXJzOiBTdHJpbmdNYXApOiBhbnkge1xuICByZXR1cm4gZnVuY3Rpb24gPFRGdW5jIGV4dGVuZHMgRnVuY3Rpb24+KFRhcmdldDogVEZ1bmMpOiBURnVuYyB7XG4gICAgVGFyZ2V0LnByb3RvdHlwZS5nZXREZWZhdWx0SGVhZGVycyA9IGZ1bmN0aW9uKCk6IFN0cmluZ01hcCB7XG4gICAgICByZXR1cm4gaGVhZGVycztcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRhcmdldDtcbiAgfTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBiYXNlIFVSTCBvZiB0aGUgUkVTVCBBUEkuXG4gKiBJbnRlbmRlZCB0byB1c2UgYXMgYSBkZWNvcmF0b3I6IEBCYXNlVXJsKFwiaHR0cDovLy4uLlwiKVxuICogQHBhcmFtIHVybCAgIHRoZSBiYXNlIFVSTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEJhc2VVcmwodXJsOiBzdHJpbmcpOiBhbnkge1xuICByZXR1cm4gZnVuY3Rpb24gPFRGdW5jIGV4dGVuZHMgRnVuY3Rpb24+KFRhcmdldDogVEZ1bmMpOiBURnVuYyB7XG4gICAgVGFyZ2V0LnByb3RvdHlwZS5nZXRCYXNlVXJsID0gZnVuY3Rpb24oKTogYW55IHtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfTtcbiAgICByZXR1cm4gVGFyZ2V0O1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgZW51bSBFbnVtUmVzdENsaWVudE1ldGFkYXRhXG57XG4gIFBBUkFNX1BBVEggPSAnUGF0aCcsXG4gIFBBUkFNX1FVRVJZID0gJ1F1ZXJ5JyxcbiAgUEFSQU1fQk9EWSA9ICdCb2R5JyxcbiAgUEFSQU1fSEVBREVSID0gJ0hlYWRlcicsXG5cbiAgTUVUSE9EID0gJ01FVEhPRCcsXG5cbiAgTUVUSE9EX0dFVCA9ICdHRVQnLFxuICBNRVRIT0RfUE9TVCA9ICdQT1NUJyxcbiAgTUVUSE9EX1BVVCA9ICdQVVQnLFxuICBNRVRIT0RfUEFUQ0ggPSAnUEFUQ0gnLFxuICBNRVRIT0RfREVMRVRFID0gJ0RFTEVURScsXG4gIE1FVEhPRF9IRUFEID0gJ0hFQUQnLFxuXG59XG5cbmV4cG9ydCB0eXBlIElFbnVtUmVzdENsaWVudE1ldGFkYXRhUGFyYW0gPSBFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX1BBVEggfCBFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX1FVRVJZIHwgRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9CT0RZIHwgRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9IRUFERVJcbiAgO1xuXG5leHBvcnQgdHlwZSBJRW51bVJlc3RDbGllbnRNZXRhZGF0YU1ldGhvZCA9IEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuTUVUSE9EX0dFVCB8IEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuTUVUSE9EX1BPU1QgfCBFbnVtUmVzdENsaWVudE1ldGFkYXRhLk1FVEhPRF9QVVQgfCBFbnVtUmVzdENsaWVudE1ldGFkYXRhLk1FVEhPRF9QQVRDSCB8IEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuTUVUSE9EX0RFTEVURSB8IEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuTUVUSE9EX0hFQURcbiAgO1xuXG5leHBvcnQgdHlwZSBJRW51bVJlc3RDbGllbnRNZXRhZGF0YUV4Y2x1ZGUgPSBFeGNsdWRlPEVudW1SZXN0Q2xpZW50TWV0YWRhdGEsIElFbnVtUmVzdENsaWVudE1ldGFkYXRhUGFyYW0+O1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZXN0Q2xpZW50TWV0aG9kTWV0YWRhdGFSZXR1cm5cbntcbiAgW0VudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fUEFUSF06IFBhcmFtZXRlcltdLFxuICBbRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9RVUVSWV06IFBhcmFtZXRlcltdLFxuICBbRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9CT0RZXTogUGFyYW1ldGVyW10sXG4gIFtFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX0hFQURFUl06IFBhcmFtZXRlcltdLFxuXG4gIFtFbnVtUmVzdENsaWVudE1ldGFkYXRhLk1FVEhPRF06IElFbnVtUmVzdENsaWVudE1ldGFkYXRhTWV0aG9kLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVzdENsaWVudE1ldGhvZE1ldGFkYXRhPEsgZXh0ZW5kcyBJRW51bVJlc3RDbGllbnRNZXRhZGF0YVBhcmFtLCBSQyBleHRlbmRzIFJlc3RDbGllbnQgPSBSZXN0Q2xpZW50PihtZXRhZGF0YUtleTogSywgdGFyZ2V0OiBSQywgcHJvcGVydHlLZXk6IHN5bWJvbCB8IHN0cmluZyk6IElSZXN0Q2xpZW50TWV0aG9kTWV0YWRhdGFSZXR1cm5bS11cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXN0Q2xpZW50TWV0aG9kTWV0YWRhdGE8VCBleHRlbmRzIGFueSwgUkMgZXh0ZW5kcyBSZXN0Q2xpZW50ID0gUmVzdENsaWVudD4obWV0YWRhdGFLZXk6IElFbnVtUmVzdENsaWVudE1ldGFkYXRhRXhjbHVkZSwgdGFyZ2V0OiBSQywgcHJvcGVydHlLZXk6IHN5bWJvbCB8IHN0cmluZyk6IFRcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZXN0Q2xpZW50TWV0aG9kTWV0YWRhdGE8VCBleHRlbmRzIGFueSwgUkMgZXh0ZW5kcyBSZXN0Q2xpZW50ID0gUmVzdENsaWVudD4obWV0YWRhdGFLZXk6IEVudW1SZXN0Q2xpZW50TWV0YWRhdGEsIHRhcmdldDogUkMsIHByb3BlcnR5S2V5OiBzeW1ib2wgfCBzdHJpbmcpOiBUXG57XG4gIHJldHVybiBSZWZsZWN0LmdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5IGFzIGFueSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRSZXN0Q2xpZW50TWV0aG9kTWV0YWRhdGE8SyBleHRlbmRzIElFbnVtUmVzdENsaWVudE1ldGFkYXRhUGFyYW0sIFJDIGV4dGVuZHMgUmVzdENsaWVudD4obWV0YWRhdGFLZXk6IEssIHRhcmdldDogUkMsIHByb3BlcnR5S2V5OiBzeW1ib2wgfCBzdHJpbmcsIG1ldGFkYXRhVmFsdWU6IElSZXN0Q2xpZW50TWV0aG9kTWV0YWRhdGFSZXR1cm5bS10pOiB2b2lkXG5leHBvcnQgZnVuY3Rpb24gc2V0UmVzdENsaWVudE1ldGhvZE1ldGFkYXRhPFJDIGV4dGVuZHMgUmVzdENsaWVudD4obWV0YWRhdGFLZXk6IElFbnVtUmVzdENsaWVudE1ldGFkYXRhRXhjbHVkZSwgdGFyZ2V0OiBSQywgcHJvcGVydHlLZXk6IHN5bWJvbCB8IHN0cmluZywgbWV0YWRhdGFWYWx1ZSk6IHZvaWRcbmV4cG9ydCBmdW5jdGlvbiBzZXRSZXN0Q2xpZW50TWV0aG9kTWV0YWRhdGE8UkMgZXh0ZW5kcyBSZXN0Q2xpZW50PihtZXRhZGF0YUtleTogRW51bVJlc3RDbGllbnRNZXRhZGF0YSwgdGFyZ2V0OiBSQywgcHJvcGVydHlLZXk6IHN5bWJvbCB8IHN0cmluZywgbWV0YWRhdGFWYWx1ZSlcbntcbiAgcmV0dXJuIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgcHJvcGVydHlLZXkgYXMgYW55KTtcbn1cblxuZnVuY3Rpb24gcGFyYW1CdWlsZGVyKHBhcmFtTmFtZTogSUVudW1SZXN0Q2xpZW50TWV0YWRhdGFQYXJhbSkge1xuICByZXR1cm4gZnVuY3Rpb24oa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb248UkMgZXh0ZW5kcyBSZXN0Q2xpZW50Pih0YXJnZXQ6IFJDLCBwcm9wZXJ0eUtleTogc3ltYm9sIHwgc3RyaW5nLCBwYXJhbWV0ZXJJbmRleDogbnVtYmVyKSB7XG4gICAgICAvL2NvbnN0IG1ldGFkYXRhS2V5ID0gYCR7U3RyaW5nKHByb3BlcnR5S2V5KX1fJHtwYXJhbU5hbWV9X3BhcmFtZXRlcnNgO1xuICAgICAgY29uc3QgcGFyYW1PYmo6IFBhcmFtZXRlciA9IHtcbiAgICAgICAga2V5LFxuICAgICAgICBwYXJhbWV0ZXJJbmRleCxcbiAgICAgIH07XG5cbiAgICAgIGxldCBhcnIgPSBnZXRSZXN0Q2xpZW50TWV0aG9kTWV0YWRhdGEocGFyYW1OYW1lLCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgICAgYXJyLnB1c2gocGFyYW1PYmopO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyID0gW3BhcmFtT2JqXTtcbiAgICAgIH1cbiAgICAgIHNldFJlc3RDbGllbnRNZXRob2RNZXRhZGF0YShwYXJhbU5hbWUsIHRhcmdldCwgcHJvcGVydHlLZXksIGFycik7XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBQYXRoIHZhcmlhYmxlIG9mIGEgbWV0aG9kJ3MgVVJMLCB0eXBlOiBzdHJpbmcuXG4gKiBAcGFyYW0ga2V5ICAgcGF0aCBrZXkgdG8gYmluZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFBhdGggPSBwYXJhbUJ1aWxkZXIoRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9QQVRIKTtcblxuLyoqXG4gKiBRdWVyeSB2YWx1ZSBvZiBhIG1ldGhvZCdzIFVSTCwgdHlwZTogc3RyaW5nLlxuICogQHBhcmFtIGtleSAgIHF1ZXJ5IGtleSB0byBiaW5kIHZhbHVlLlxuICovXG5leHBvcnQgY29uc3QgUXVlcnkgPSBwYXJhbUJ1aWxkZXIoRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9RVUVSWSk7XG5cbi8qKlxuICogQm9keSBvZiBhIFJFU1QgbWV0aG9kLCB0eXBlOiBrZXktdmFsdWUgcGFpciBvYmplY3QuXG4gKiBPbmx5IG9uZSBib2R5IHBlciBtZXRob2QhXG4gKi9cbmV4cG9ydCBjb25zdCBCb2R5ID0gcGFyYW1CdWlsZGVyKEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fQk9EWSkoJ0JvZHknKTtcblxuLyoqXG4gKiBDdXN0b20gaGVhZGVyIG9mIGEgUkVTVCBtZXRob2QsIHR5cGU6IHN0cmluZy5cbiAqIEBwYXJhbSBrZXkgICBoZWFkZXIga2V5IHRvIGJpbmQgdmFsdWUuXG4gKi9cbmV4cG9ydCBjb25zdCBIZWFkZXIgPSBwYXJhbUJ1aWxkZXIoRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9IRUFERVIpO1xuXG5leHBvcnQgaW50ZXJmYWNlIElSZXN0Q2xpZW50TWV0aG9kRGVzY3JpcHRvcjxUIGV4dGVuZHMgRnVuY3Rpb24sIFNNIGV4dGVuZHMgU3RyaW5nTWFwID0gU3RyaW5nTWFwPiBleHRlbmRzIFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPFQ+XG57XG5cdGhlYWRlcnM/OiBOYW1lZFZhbHVlczxTTT5cbn1cblxuLyoqXG4gKiBTZXQgY3VzdG9tIGhlYWRlcnMgZm9yIGEgUkVTVCBtZXRob2QuXG4gKiBAcGFyYW0gaGVhZGVyc0RlZiAgICBjdXN0b20gaGVhZGVycyBpbiBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXJzPFNNIGV4dGVuZHMgU3RyaW5nTWFwPihoZWFkZXJzRGVmOiBTTSkge1xuICByZXR1cm4gZnVuY3Rpb248RiBleHRlbmRzIEZ1bmN0aW9uPihfdGFyZ2V0OiBSZXN0Q2xpZW50LCBfcHJvcGVydHlLZXk6IHN0cmluZywgZGVzY3JpcHRvcjogSVJlc3RDbGllbnRNZXRob2REZXNjcmlwdG9yPEYsIFNNPikge1xuICBcdC8vIEB0cy1pZ25vcmVcbiAgICBkZXNjcmlwdG9yLmhlYWRlcnMgPSBoZWFkZXJzRGVmO1xuICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWV0aG9kQnVpbGRlcihtZXRob2Q6IEh0dHBNZXRob2QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHVybDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uPFJDIGV4dGVuZHMgUmVzdENsaWVudCA9IFJlc3RDbGllbnQ+KHRhcmdldDogUkMsIHByb3BlcnR5S2V5OiBzeW1ib2wgfCBzdHJpbmcsIGRlc2NyaXB0b3I6IElSZXN0Q2xpZW50TWV0aG9kRGVzY3JpcHRvcjxGdW5jdGlvbj4pIHtcbiAgICAgIC8vY29uc3QgcFBhdGggPSB0YXJnZXRbYCR7cHJvcGVydHlLZXl9X1BhdGhfcGFyYW1ldGVyc2BdIGFzIFBhcmFtZXRlcltdO1xuICAgICAgLy9jb25zdCBwUXVlcnkgPSB0YXJnZXRbYCR7cHJvcGVydHlLZXl9X1F1ZXJ5X3BhcmFtZXRlcnNgXSBhcyBQYXJhbWV0ZXJbXTtcbiAgICAgIC8vY29uc3QgcEJvZHkgPSB0YXJnZXRbYCR7cHJvcGVydHlLZXl9X0JvZHlfcGFyYW1ldGVyc2BdIGFzIFBhcmFtZXRlcltdO1xuICAgICAgLy9jb25zdCBwSGVhZGVyID0gdGFyZ2V0W2Ake3Byb3BlcnR5S2V5fV9IZWFkZXJfcGFyYW1ldGVyc2BdIGFzIFBhcmFtZXRlcltdO1xuXG4gICAgICBjb25zdCBwUGF0aCA9IGdldFJlc3RDbGllbnRNZXRob2RNZXRhZGF0YShFbnVtUmVzdENsaWVudE1ldGFkYXRhLlBBUkFNX1BBVEgsIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgY29uc3QgcFF1ZXJ5ID0gZ2V0UmVzdENsaWVudE1ldGhvZE1ldGFkYXRhKEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuUEFSQU1fUVVFUlksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgY29uc3QgcEJvZHkgPSBnZXRSZXN0Q2xpZW50TWV0aG9kTWV0YWRhdGEoRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9CT0RZLCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgIGNvbnN0IHBIZWFkZXIgPSBnZXRSZXN0Q2xpZW50TWV0aG9kTWV0YWRhdGEoRW51bVJlc3RDbGllbnRNZXRhZGF0YS5QQVJBTV9IRUFERVIsIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuXG4gICAgICBjb25zdCBvbGRGbiA9IGRlc2NyaXB0b3IudmFsdWU7XG5cbiAgICAgIHNldFJlc3RDbGllbnRNZXRob2RNZXRhZGF0YShFbnVtUmVzdENsaWVudE1ldGFkYXRhLk1FVEhPRCwgdGFyZ2V0LCBwcm9wZXJ0eUtleSwgbWV0aG9kKTtcblxuICAgICAgZGVzY3JpcHRvci52YWx1ZSA9IGZ1bmN0aW9uKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICAgIGxldCBib2R5ID0gbnVsbDtcbiAgICAgICAgaWYgKHBCb2R5KSB7XG4gICAgICAgICAgYm9keSA9IEpTT04uc3RyaW5naWZ5KGFyZ3NbcEJvZHlbMF0ucGFyYW1ldGVySW5kZXhdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXNVcmw6IHN0cmluZyA9IHVybDtcbiAgICAgICAgaWYgKHBQYXRoKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBrIGluIHBQYXRoKSB7XG4gICAgICAgICAgICBpZiAocFBhdGguaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgcmVzVXJsID0gcmVzVXJsLnJlcGxhY2UoJ3snICsgcFBhdGhba10ua2V5ICsgJ30nLCBhcmdzW3BQYXRoW2tdLnBhcmFtZXRlckluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyYW1zID0gbmV3IE5hbWVkVmFsdWVzKCk7XG4gICAgICAgIGlmIChwUXVlcnkpIHtcbiAgICAgICAgICBwUXVlcnlcbiAgICAgICAgICAgIC5maWx0ZXIocCA9PiBhcmdzW3AucGFyYW1ldGVySW5kZXhdKVxuICAgICAgICAgICAgLmZvckVhY2gocCA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGtleSA9IHAua2V5O1xuICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBhcmdzW3AucGFyYW1ldGVySW5kZXhdO1xuICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoZWFkZXJzID0gbmV3IE5hbWVkVmFsdWVzKHRoaXMuZ2V0RGVmYXVsdEhlYWRlcnMoKSk7XG4gICAgICAgIGZvciAoY29uc3QgayBpbiBkZXNjcmlwdG9yLmhlYWRlcnMpIHtcbiAgICAgICAgICBpZiAoZGVzY3JpcHRvci5oZWFkZXJzLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICBoZWFkZXJzLnNldChrLCBkZXNjcmlwdG9yLmhlYWRlcnNba10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocEhlYWRlcikge1xuICAgICAgICAgIGZvciAoY29uc3QgayBpbiBwSGVhZGVyKSB7XG4gICAgICAgICAgICBpZiAocEhlYWRlci5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICBoZWFkZXJzLnNldChwSGVhZGVyW2tdLmtleSwgYXJnc1twSGVhZGVyW2tdLnBhcmFtZXRlckluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmluYWxVcmwgPSB1cmxfcmVzb2x2ZSh0aGlzLmdldEJhc2VVcmwoKSwgcmVzVXJsKTtcbiAgICAgICAgbGV0IHJlcXVlc3QgPSBuZXcgSHR0cFJlcXVlc3RPcHRpb25zKGZpbmFsVXJsLCBtZXRob2QsIGJvZHksIGhlYWRlcnMsIHBhcmFtcyk7XG4gICAgICAgIGlmICh0aGlzLnJlcXVlc3RJbnRlcmNlcHRvcikge1xuICAgICAgICAgIHJlcXVlc3QgPSB0aGlzLnJlcXVlc3RJbnRlcmNlcHRvcihyZXF1ZXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3Qgb2xkVHJhbnNmb3JtUmVzcG9uc2UgPSByZXF1ZXN0LnRyYW5zZm9ybVJlc3BvbnNlO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmVxdWVzdC50cmFuc2Zvcm1SZXNwb25zZSA9IGZ1bmN0aW9uIChkYXRhKVxuICAgICAgICB7XG4gICAgICAgICAgbGV0IHJldCA9IG9sZEZuKG9sZFRyYW5zZm9ybVJlc3BvbnNlID8gb2xkVHJhbnNmb3JtUmVzcG9uc2UuY2FsbCh0aGlzLCBkYXRhKSA6IGRhdGEpO1xuICAgICAgICAgIGlmIChyZXQgPT0gbnVsbClcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gKHRoaXMuaHR0cENsaWVudCBhcyBIdHRwU2VydmljZSkucmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBHRVQgbWV0aG9kLlxuICogQHBhcmFtIHVybCAgIHJlc291cmNlIFVSTCBvZiB0aGUgbWV0aG9kXG4gKi9cbmV4cG9ydCBjb25zdCBHRVQgPSBtZXRob2RCdWlsZGVyKEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuTUVUSE9EX0dFVCk7XG5cbi8qKlxuICogUE9TVCBtZXRob2QuXG4gKiBAcGFyYW0gdXJsICAgcmVzb3VyY2UgVVJMIG9mIHRoZSBtZXRob2RcbiAqL1xuZXhwb3J0IGNvbnN0IFBPU1QgPSBtZXRob2RCdWlsZGVyKEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuTUVUSE9EX1BPU1QpO1xuXG4vKipcbiAqIFBVVCBtZXRob2QuXG4gKiBAcGFyYW0gdXJsICAgcmVzb3VyY2UgVVJMIG9mIHRoZSBtZXRob2RcbiAqL1xuZXhwb3J0IGNvbnN0IFBVVCA9IG1ldGhvZEJ1aWxkZXIoRW51bVJlc3RDbGllbnRNZXRhZGF0YS5NRVRIT0RfUFVUKTtcblxuLyoqXG4gKiBQQVRDSCBtZXRob2QuXG4gKiBAcGFyYW0gdXJsICAgcmVzb3VyY2UgVVJMIG9mIHRoZSBtZXRob2RcbiAqL1xuZXhwb3J0IGNvbnN0IFBBVENIID0gbWV0aG9kQnVpbGRlcihFbnVtUmVzdENsaWVudE1ldGFkYXRhLk1FVEhPRF9QQVRDSCk7XG5cbi8qKlxuICogREVMRVRFIG1ldGhvZC5cbiAqIEBwYXJhbSB1cmwgICByZXNvdXJjZSBVUkwgb2YgdGhlIG1ldGhvZFxuICovXG5leHBvcnQgY29uc3QgREVMRVRFID0gbWV0aG9kQnVpbGRlcihFbnVtUmVzdENsaWVudE1ldGFkYXRhLk1FVEhPRF9ERUxFVEUpO1xuXG4vKipcbiAqIEhFQUQgbWV0aG9kLlxuICogQHBhcmFtIHVybCAgIHJlc291cmNlIFVSTCBvZiB0aGUgbWV0aG9kXG4gKi9cbmV4cG9ydCBjb25zdCBIRUFEID0gbWV0aG9kQnVpbGRlcihFbnVtUmVzdENsaWVudE1ldGFkYXRhLk1FVEhPRF9IRUFEKTtcbiJdfQ==