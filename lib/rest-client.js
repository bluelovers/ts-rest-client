"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:ban-types
const http_request_options_1 = require("./http-request-options");
const named_values_1 = require("./named-values");
require("reflect-metadata");
const util_1 = require("./util");
/**
 * Abstract base class for the REST clients.
 */
class RestClient {
    constructor(options) {
        /**
         * Request interceptor allowing to modifiy the collected request data before sending it.
         * Typical use is the insertion of an authorization token to the request headers.
         * Leave null if you don't want to use it.
         */
        this[_a] = null;
        this[util_1.SymbolHttpClient] = options.httpClient;
        this[util_1.SymbolRequestInterceptor] = options.requestInterceptor || null;
    }
    get $baseURL() {
        return this[util_1.SymbolBaseUrl]();
    }
    get $http() {
        return this[util_1.SymbolHttpClient];
    }
    $request(options) {
        return this[util_1.SymbolHttpClient].request(options);
    }
    /**
     * Returns the base of the REST API URL.
     */
    [(_a = util_1.SymbolRequestInterceptor, util_1.SymbolBaseUrl)]() {
        return getThisTypeMetadata("BASE_URL" /* BASE_URL */, this) || null;
    }
    /**
     * Returns the default HTTP headers attached to each request.
     */
    [util_1.SymbolDefaultHeaders]() {
        return getThisTypeMetadata("DEFAULT_HEADERS" /* DEFAULT_HEADERS */, this) || null;
    }
}
exports.RestClient = RestClient;
/**
 * Sets the default HTTP headers attached to each request to the REST API.
 * Intended to use as a decorator: @DefaultHeaders({'Header': 'value', 'Header2': 'value'}
 * @param headers   The headers in key-value pairs.
 */
function DefaultHeaders(headers) {
    return function (Target) {
        setClassMetadata("DEFAULT_HEADERS" /* DEFAULT_HEADERS */, headers, Target);
        return Target;
    };
}
exports.DefaultHeaders = DefaultHeaders;
/**
 * Sets the base URL of the REST API.
 * Intended to use as a decorator: @BaseUrl("http://...")
 * @param url   the base URL.
 */
function BaseUrl(url) {
    return function (Target) {
        setClassMetadata("BASE_URL" /* BASE_URL */, util_1.urlNormalize(url), Target);
        return Target;
    };
}
exports.BaseUrl = BaseUrl;
function getThisTypeMetadata(metadataKey, target) {
    return Reflect.getMetadata(metadataKey, Reflect.getPrototypeOf(target));
}
exports.getThisTypeMetadata = getThisTypeMetadata;
function getClassMetadata(metadataKey, target) {
    return Reflect.getMetadata(metadataKey, target.prototype);
}
exports.getClassMetadata = getClassMetadata;
function setClassMetadata(metadataKey, metadataValue, target) {
    Reflect.defineMetadata(metadataKey, metadataValue, target.prototype);
}
exports.setClassMetadata = setClassMetadata;
function getRestClientMethodMetadata(metadataKey, target, propertyKey) {
    return Reflect.getMetadata(metadataKey, target, propertyKey);
}
exports.getRestClientMethodMetadata = getRestClientMethodMetadata;
function setRestClientMethodMetadata(metadataKey, target, propertyKey, metadataValue) {
    return Reflect.defineMetadata(metadataKey, metadataValue, target, propertyKey);
}
exports.setRestClientMethodMetadata = setRestClientMethodMetadata;
function paramBuilder(paramName) {
    return function (key) {
        return function (target, propertyKey, parameterIndex) {
            //const metadataKey = `${String(propertyKey)}_${paramName}_parameters`;
            const paramObj = {
                key,
                parameterIndex,
            };
            let arr = getRestClientMethodMetadata(paramName, target, propertyKey);
            if (Array.isArray(arr)) {
                arr.push(paramObj);
            }
            else {
                arr = [paramObj];
            }
            setRestClientMethodMetadata(paramName, target, propertyKey, arr);
        };
    };
}
/**
 * Path variable of a method's URL, type: string.
 * @param key   path key to bind value.
 */
exports.Path = paramBuilder("Path" /* PARAM_PATH */);
/**
 * Query value of a method's URL, type: string.
 * @param key   query key to bind value.
 */
exports.Query = paramBuilder("Query" /* PARAM_QUERY */);
/**
 * Body of a REST method, type: key-value pair object.
 * Only one body per method!
 */
exports.Body = paramBuilder("Body" /* PARAM_BODY */)('Body');
/**
 * Custom header of a REST method, type: string.
 * @param key   header key to bind value.
 */
exports.Header = paramBuilder("Header" /* PARAM_HEADER */);
/**
 * Set custom headers for a REST method.
 * @param headersDef    custom headers in key-value pairs.
 */
function Headers(headersDef) {
    return function (_target, _propertyKey, descriptor) {
        // @ts-ignore
        descriptor.headers = headersDef;
        return descriptor;
    };
}
exports.Headers = Headers;
function methodBuilder(method) {
    return function (url) {
        return function (target, propertyKey, descriptor) {
            //const pPath = target[`${propertyKey}_Path_parameters`] as Parameter[];
            //const pQuery = target[`${propertyKey}_Query_parameters`] as Parameter[];
            //const pBody = target[`${propertyKey}_Body_parameters`] as Parameter[];
            //const pHeader = target[`${propertyKey}_Header_parameters`] as Parameter[];
            const pPath = getRestClientMethodMetadata("Path" /* PARAM_PATH */, target, propertyKey);
            const pQuery = getRestClientMethodMetadata("Query" /* PARAM_QUERY */, target, propertyKey);
            const pBody = getRestClientMethodMetadata("Body" /* PARAM_BODY */, target, propertyKey);
            const pHeader = getRestClientMethodMetadata("Header" /* PARAM_HEADER */, target, propertyKey);
            const oldFn = descriptor.value;
            setRestClientMethodMetadata("METHOD" /* METHOD */, target, propertyKey, method);
            descriptor.value = function (...args) {
                let body = null;
                if (pBody) {
                    body = JSON.stringify(args[pBody[0].parameterIndex]);
                }
                const self = this;
                let resUrl = url;
                if (pPath) {
                    for (const k in pPath) {
                        if (pPath.hasOwnProperty(k)) {
                            resUrl = resUrl.replace('{' + pPath[k].key + '}', args[pPath[k].parameterIndex]);
                        }
                    }
                }
                const params = new named_values_1.NamedValues();
                if (pQuery) {
                    pQuery
                        .filter(p => args[p.parameterIndex])
                        .forEach(p => {
                        const key = p.key;
                        let value = args[p.parameterIndex];
                        if (value instanceof Object) {
                            value = JSON.stringify(value);
                        }
                        params.set(key, value);
                    });
                }
                const headers = new named_values_1.NamedValues(self[util_1.SymbolDefaultHeaders]());
                if (descriptor.headers) {
                    for (const k in descriptor.headers) {
                        if (descriptor.headers.hasOwnProperty(k)) {
                            // @ts-ignore
                            headers.set(k, descriptor.headers[k]);
                        }
                    }
                }
                if (pHeader) {
                    for (const k in pHeader) {
                        if (pHeader.hasOwnProperty(k)) {
                            headers.set(pHeader[k].key, args[pHeader[k].parameterIndex]);
                        }
                    }
                }
                const finalUrl = util_1.urlResolve(resUrl, self[util_1.SymbolBaseUrl]());
                let request = new http_request_options_1.HttpRequestOptions(finalUrl, method, body, headers, params);
                if (this[util_1.SymbolRequestInterceptor]) {
                    request = this[util_1.SymbolRequestInterceptor](request);
                }
                if (request instanceof http_request_options_1.HttpRequestOptions) {
                    // @ts-ignore
                    request = request.toValue();
                }
                const oldTransformResponse = request.transformResponse;
                let newTransformRespons = function (data) {
                    let ret = oldFn.call(self, data);
                    if (ret == null) {
                        return data;
                    }
                    return ret;
                };
                if (!Array.isArray(oldTransformResponse)) {
                    if (!oldTransformResponse) {
                        request.transformResponse = [];
                    }
                    else {
                        request.transformResponse = [oldTransformResponse];
                    }
                }
                request.transformResponse.push(newTransformRespons);
                return self.$http.request(request);
            };
        };
    };
}
exports.methodBuilder = methodBuilder;
/**
 * GET method.
 * @param url   resource URL of the method
 */
exports.GET = methodBuilder("GET" /* METHOD_GET */);
/**
 * POST method.
 * @param url   resource URL of the method
 */
exports.POST = methodBuilder("POST" /* METHOD_POST */);
/**
 * PUT method.
 * @param url   resource URL of the method
 */
exports.PUT = methodBuilder("PUT" /* METHOD_PUT */);
/**
 * PATCH method.
 * @param url   resource URL of the method
 */
exports.PATCH = methodBuilder("PATCH" /* METHOD_PATCH */);
/**
 * DELETE method.
 * @param url   resource URL of the method
 */
exports.DELETE = methodBuilder("DELETE" /* METHOD_DELETE */);
/**
 * HEAD method.
 * @param url   resource URL of the method
 */
exports.HEAD = methodBuilder("HEAD" /* METHOD_HEAD */);
exports.default = RestClient;
//# sourceMappingURL=data:application/json;base64,