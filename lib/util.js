"use strict";
/**
 * Created by user on 2019/5/12.
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const url_1 = require("url");
const Bluebird = require("bluebird");
const util = require("util");
function urlNormalize(input) {
    if (typeof input === 'string') {
        return new URL(input).href;
    }
    else if (typeof input.href !== 'string') {
        throw new TypeError(`input not string | URL`);
    }
    return input.href;
}
exports.urlNormalize = urlNormalize;
function urlResolve(input, base) {
    if (typeof input !== 'string') {
        throw new TypeError(`input not string | URL`);
    }
    if (base == null) {
        return urlNormalize(input);
    }
    return urlNormalize(url_1.resolve(urlNormalize(base), input));
}
exports.urlResolve = urlResolve;
var EnumRestClientMetadata;
(function (EnumRestClientMetadata) {
    EnumRestClientMetadata["PARAM_PATH"] = "Path";
    EnumRestClientMetadata["PARAM_QUERY"] = "Query";
    EnumRestClientMetadata["PARAM_BODY"] = "Body";
    EnumRestClientMetadata["PARAM_HEADER"] = "Header";
    EnumRestClientMetadata["METHOD_GET"] = "GET";
    EnumRestClientMetadata["METHOD_POST"] = "POST";
    EnumRestClientMetadata["METHOD_PUT"] = "PUT";
    EnumRestClientMetadata["METHOD_PATCH"] = "PATCH";
    EnumRestClientMetadata["METHOD_DELETE"] = "DELETE";
    EnumRestClientMetadata["METHOD_HEAD"] = "HEAD";
    EnumRestClientMetadata["METHOD"] = "METHOD";
    EnumRestClientMetadata["BASE_URL"] = "BASE_URL";
    EnumRestClientMetadata["DEFAULT_HEADERS"] = "DEFAULT_HEADERS";
    EnumRestClientMetadata["HTTP_CLIENT"] = "HTTP_CLIENT";
    EnumRestClientMetadata["REQUEST_INTERCEPTOR"] = "REQUEST_INTERCEPTOR";
})(EnumRestClientMetadata = exports.EnumRestClientMetadata || (exports.EnumRestClientMetadata = {}));
exports.SymbolBaseUrl = Symbol("BASE_URL" /* BASE_URL */);
exports.SymbolDefaultHeaders = Symbol("DEFAULT_HEADERS" /* DEFAULT_HEADERS */);
exports.SymbolHttpClient = Symbol("HTTP_CLIENT" /* HTTP_CLIENT */);
exports.SymbolRequestInterceptor = Symbol("REQUEST_INTERCEPTOR" /* REQUEST_INTERCEPTOR */);
function standardQueryEncoding(v) {
    return encodeURIComponent(v);
}
exports.standardQueryEncoding = standardQueryEncoding;
function createObserver(observer, log = console) {
    return {
        next(data) {
            log.debug('Next: %s', util.inspect(data));
        },
        error(err) {
            log.debug('Error: %s', util.inspect(err));
        },
        complete() {
            log.debug('Completed');
        },
        ...observer,
    };
}
exports.createObserver = createObserver;
function subscribeObservable(ob, observer) {
    return ob.subscribe(createObserver(observer));
}
exports.subscribeObservable = subscribeObservable;
function resolveObservable(ob, observer) {
    return Bluebird.resolve(ob)
        .then(function (ob) {
        return subscribeObservable(ob, observer);
    });
}
exports.resolveObservable = resolveObservable;
exports.default = exports;
function getThisTypeMetadata(metadataKey, target) {
    return Reflect.getMetadata(metadataKey, Reflect.getPrototypeOf(target).constructor);
}
exports.getThisTypeMetadata = getThisTypeMetadata;
function setThisTypeMetadata(metadataKey, metadataValue, target) {
    return Reflect.defineMetadata(metadataKey, metadataValue, Reflect.getPrototypeOf(target).constructor);
}
exports.setThisTypeMetadata = setThisTypeMetadata;
function getClassMetadata(metadataKey, target) {
    return Reflect.getMetadata(metadataKey, target);
}
exports.getClassMetadata = getClassMetadata;
function setClassMetadata(metadataKey, metadataValue, target) {
    return Reflect.defineMetadata(metadataKey, metadataValue, target);
}
exports.setClassMetadata = setClassMetadata;
//# sourceMappingURL=data:application/json;base64,