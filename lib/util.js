"use strict";
/**
 * Created by user on 2019/5/12.
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const url_1 = require("url");
const Bluebird = require("bluebird");
const util = require("util");
function urlNormalize(input) {
    if (typeof input === 'string') {
        return new URL(input).href;
    }
    else if (typeof input.href !== 'string') {
        throw new TypeError(`input not string | URL`);
    }
    return input.href;
}
exports.urlNormalize = urlNormalize;
function urlResolve(input, base) {
    if (typeof input !== 'string') {
        throw new TypeError(`input not string | URL`);
    }
    if (base == null) {
        return urlNormalize(input);
    }
    return urlNormalize(url_1.resolve(urlNormalize(base), input));
}
exports.urlResolve = urlResolve;
var EnumRestClientMetadata;
(function (EnumRestClientMetadata) {
    EnumRestClientMetadata["PARAM_PATH"] = "Path";
    EnumRestClientMetadata["PARAM_QUERY"] = "Query";
    EnumRestClientMetadata["PARAM_BODY"] = "Body";
    EnumRestClientMetadata["PARAM_HEADER"] = "Header";
    EnumRestClientMetadata["METHOD_GET"] = "GET";
    EnumRestClientMetadata["METHOD_POST"] = "POST";
    EnumRestClientMetadata["METHOD_PUT"] = "PUT";
    EnumRestClientMetadata["METHOD_PATCH"] = "PATCH";
    EnumRestClientMetadata["METHOD_DELETE"] = "DELETE";
    EnumRestClientMetadata["METHOD_HEAD"] = "HEAD";
    EnumRestClientMetadata["METHOD"] = "METHOD";
    EnumRestClientMetadata["BASE_URL"] = "BASE_URL";
    EnumRestClientMetadata["DEFAULT_HEADERS"] = "DEFAULT_HEADERS";
    EnumRestClientMetadata["HTTP_CLIENT"] = "HTTP_CLIENT";
    EnumRestClientMetadata["REQUEST_INTERCEPTOR"] = "REQUEST_INTERCEPTOR";
})(EnumRestClientMetadata = exports.EnumRestClientMetadata || (exports.EnumRestClientMetadata = {}));
exports.SymbolBaseUrl = Symbol("BASE_URL" /* BASE_URL */);
exports.SymbolDefaultHeaders = Symbol("DEFAULT_HEADERS" /* DEFAULT_HEADERS */);
exports.SymbolHttpClient = Symbol("HTTP_CLIENT" /* HTTP_CLIENT */);
exports.SymbolRequestInterceptor = Symbol("REQUEST_INTERCEPTOR" /* REQUEST_INTERCEPTOR */);
function standardQueryEncoding(v) {
    return encodeURIComponent(v);
}
exports.standardQueryEncoding = standardQueryEncoding;
function createObserver(observer, log = console) {
    return {
        next(data) {
            log.debug('Next: %s', util.inspect(data));
        },
        error(err) {
            log.debug('Error: %s', util.inspect(err));
        },
        complete() {
            log.debug('Completed');
        },
        ...observer,
    };
}
exports.createObserver = createObserver;
function subscribeObservable(ob, observer) {
    return ob.subscribe(createObserver(observer));
}
exports.subscribeObservable = subscribeObservable;
function resolveObservable(ob, observer) {
    return Bluebird.resolve(ob)
        .then(function (ob) {
        return subscribeObservable(ob, observer);
    });
}
exports.resolveObservable = resolveObservable;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILDRCQUEwQjtBQUMxQiw2QkFBOEM7QUFDOUMscUNBQXNDO0FBQ3RDLDZCQUE4QjtBQVM5QixTQUFnQixZQUFZLENBQUMsS0FBbUI7SUFFL0MsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQzdCO1FBQ0MsT0FBTyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUE7S0FDMUI7U0FDSSxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQ3ZDO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0tBQzdDO0lBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ25CLENBQUM7QUFaRCxvQ0FZQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxLQUFhLEVBQUUsSUFBbUI7SUFFNUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQzdCO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0tBQzdDO0lBRUQsSUFBSSxJQUFJLElBQUksSUFBSSxFQUNoQjtRQUNDLE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQzFCO0lBRUQsT0FBTyxZQUFZLENBQUMsYUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFiRCxnQ0FhQztBQUVELElBQWtCLHNCQXNCakI7QUF0QkQsV0FBa0Isc0JBQXNCO0lBRXZDLDZDQUFtQixDQUFBO0lBQ25CLCtDQUFxQixDQUFBO0lBQ3JCLDZDQUFtQixDQUFBO0lBQ25CLGlEQUF1QixDQUFBO0lBRXZCLDRDQUFrQixDQUFBO0lBQ2xCLDhDQUFvQixDQUFBO0lBQ3BCLDRDQUFrQixDQUFBO0lBQ2xCLGdEQUFzQixDQUFBO0lBQ3RCLGtEQUF3QixDQUFBO0lBQ3hCLDhDQUFvQixDQUFBO0lBRXBCLDJDQUFpQixDQUFBO0lBQ2pCLCtDQUFxQixDQUFBO0lBRXJCLDZEQUFtQyxDQUFBO0lBRW5DLHFEQUEyQixDQUFBO0lBQzNCLHFFQUEyQyxDQUFBO0FBRTVDLENBQUMsRUF0QmlCLHNCQUFzQixHQUF0Qiw4QkFBc0IsS0FBdEIsOEJBQXNCLFFBc0J2QztBQUVZLFFBQUEsYUFBYSxHQUFHLE1BQU0sMkJBQWlDLENBQUM7QUFDeEQsUUFBQSxvQkFBb0IsR0FBRyxNQUFNLHlDQUF3QyxDQUFDO0FBQ3RFLFFBQUEsZ0JBQWdCLEdBQUcsTUFBTSxpQ0FBb0MsQ0FBQztBQUM5RCxRQUFBLHdCQUF3QixHQUFHLE1BQU0saURBQTRDLENBQUM7QUFFM0YsU0FBZ0IscUJBQXFCLENBQUMsQ0FBUztJQUU5QyxPQUFPLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFIRCxzREFHQztBQUVELFNBQWdCLGNBQWMsQ0FBbUMsUUFBNkIsRUFDN0YsR0FBRyxHQUFHLE9BQU87SUFHYixPQUFPO1FBQ04sSUFBSSxDQUFDLElBQU87WUFFWCxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUNELEtBQUssQ0FBQyxHQUFNO1lBRVgsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFDRCxRQUFRO1lBRVAsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4QixDQUFDO1FBQ0QsR0FBRyxRQUFRO0tBQ1gsQ0FBQTtBQUNGLENBQUM7QUFuQkQsd0NBbUJDO0FBYUQsU0FBZ0IsbUJBQW1CLENBQWlDLEVBQUssRUFDeEUsUUFBb0Q7SUFHcEQsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBMkIsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBTEQsa0RBS0M7QUFFRCxTQUFnQixpQkFBaUIsQ0FBaUMsRUFBSyxFQUN0RSxRQUFvRDtJQUdwRCxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1NBQ3pCLElBQUksQ0FBQyxVQUFVLEVBQUU7UUFFakIsT0FBTyxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFDekMsQ0FBQyxDQUFDLENBQ0Q7QUFDSCxDQUFDO0FBVkQsOENBVUM7QUFFRCxrQkFBZSxPQUFrQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOS81LzEyLlxuICovXG5cbmltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5pbXBvcnQgeyByZXNvbHZlIGFzIF91cmxfcmVzb2x2ZSB9IGZyb20gJ3VybCc7XG5pbXBvcnQgQmx1ZWJpcmQgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuaW1wb3J0IHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5pbXBvcnQgeyBJQXhpb3NPYnNlcnZhYmxlIH0gZnJvbSAnLi9heGlvcyc7XG5pbXBvcnQgeyBPYnNlcnZlciwgUGFydGlhbE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgUnhqcyA9IHJlcXVpcmUoJ3J4anMnKTtcblxuZXhwb3J0IHsgT2JzZXJ2ZXIsIFBhcnRpYWxPYnNlcnZlciB9XG5cbmV4cG9ydCB0eXBlIElCbHVlYmlyZCA9IHR5cGVvZiBCbHVlYmlyZDtcblxuZXhwb3J0IGZ1bmN0aW9uIHVybE5vcm1hbGl6ZShpbnB1dDogc3RyaW5nIHwgVVJMKTogc3RyaW5nXG57XG5cdGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKVxuXHR7XG5cdFx0cmV0dXJuIG5ldyBVUkwoaW5wdXQpLmhyZWZcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgaW5wdXQuaHJlZiAhPT0gJ3N0cmluZycpXG5cdHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBpbnB1dCBub3Qgc3RyaW5nIHwgVVJMYClcblx0fVxuXG5cdHJldHVybiBpbnB1dC5ocmVmO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXJsUmVzb2x2ZShpbnB1dDogc3RyaW5nLCBiYXNlPzogc3RyaW5nIHwgVVJMKTogc3RyaW5nXG57XG5cdGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKVxuXHR7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgaW5wdXQgbm90IHN0cmluZyB8IFVSTGApXG5cdH1cblxuXHRpZiAoYmFzZSA9PSBudWxsKVxuXHR7XG5cdFx0cmV0dXJuIHVybE5vcm1hbGl6ZShpbnB1dClcblx0fVxuXG5cdHJldHVybiB1cmxOb3JtYWxpemUoX3VybF9yZXNvbHZlKHVybE5vcm1hbGl6ZShiYXNlKSwgaW5wdXQpKTtcbn1cblxuZXhwb3J0IGNvbnN0IGVudW0gRW51bVJlc3RDbGllbnRNZXRhZGF0YVxue1xuXHRQQVJBTV9QQVRIID0gJ1BhdGgnLFxuXHRQQVJBTV9RVUVSWSA9ICdRdWVyeScsXG5cdFBBUkFNX0JPRFkgPSAnQm9keScsXG5cdFBBUkFNX0hFQURFUiA9ICdIZWFkZXInLFxuXG5cdE1FVEhPRF9HRVQgPSAnR0VUJyxcblx0TUVUSE9EX1BPU1QgPSAnUE9TVCcsXG5cdE1FVEhPRF9QVVQgPSAnUFVUJyxcblx0TUVUSE9EX1BBVENIID0gJ1BBVENIJyxcblx0TUVUSE9EX0RFTEVURSA9ICdERUxFVEUnLFxuXHRNRVRIT0RfSEVBRCA9ICdIRUFEJyxcblxuXHRNRVRIT0QgPSAnTUVUSE9EJyxcblx0QkFTRV9VUkwgPSAnQkFTRV9VUkwnLFxuXG5cdERFRkFVTFRfSEVBREVSUyA9ICdERUZBVUxUX0hFQURFUlMnLFxuXG5cdEhUVFBfQ0xJRU5UID0gJ0hUVFBfQ0xJRU5UJyxcblx0UkVRVUVTVF9JTlRFUkNFUFRPUiA9ICdSRVFVRVNUX0lOVEVSQ0VQVE9SJyxcblxufVxuXG5leHBvcnQgY29uc3QgU3ltYm9sQmFzZVVybCA9IFN5bWJvbChFbnVtUmVzdENsaWVudE1ldGFkYXRhLkJBU0VfVVJMKTtcbmV4cG9ydCBjb25zdCBTeW1ib2xEZWZhdWx0SGVhZGVycyA9IFN5bWJvbChFbnVtUmVzdENsaWVudE1ldGFkYXRhLkRFRkFVTFRfSEVBREVSUyk7XG5leHBvcnQgY29uc3QgU3ltYm9sSHR0cENsaWVudCA9IFN5bWJvbChFbnVtUmVzdENsaWVudE1ldGFkYXRhLkhUVFBfQ0xJRU5UKTtcbmV4cG9ydCBjb25zdCBTeW1ib2xSZXF1ZXN0SW50ZXJjZXB0b3IgPSBTeW1ib2woRW51bVJlc3RDbGllbnRNZXRhZGF0YS5SRVFVRVNUX0lOVEVSQ0VQVE9SKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YW5kYXJkUXVlcnlFbmNvZGluZyh2OiBzdHJpbmcpOiBzdHJpbmdcbntcblx0cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9ic2VydmVyPFQsIEUgZXh0ZW5kcyBFcnJvciB8IGFueSA9IEVycm9yPihvYnNlcnZlcj86IFBhcnRpYWxPYnNlcnZlcjxUPixcblx0bG9nID0gY29uc29sZSxcbik6IE9ic2VydmVyPFQ+XG57XG5cdHJldHVybiB7XG5cdFx0bmV4dChkYXRhOiBUKVxuXHRcdHtcblx0XHRcdGxvZy5kZWJ1ZygnTmV4dDogJXMnLCB1dGlsLmluc3BlY3QoZGF0YSkpO1xuXHRcdH0sXG5cdFx0ZXJyb3IoZXJyOiBFKVxuXHRcdHtcblx0XHRcdGxvZy5kZWJ1ZygnRXJyb3I6ICVzJywgdXRpbC5pbnNwZWN0KGVycikpO1xuXHRcdH0sXG5cdFx0Y29tcGxldGUoKVxuXHRcdHtcblx0XHRcdGxvZy5kZWJ1ZygnQ29tcGxldGVkJyk7XG5cdFx0fSxcblx0XHQuLi5vYnNlcnZlcixcblx0fVxufVxuXG5leHBvcnQgdHlwZSBJVW5wYWNrT2JzZXJ2YWJsZURhdGE8VCBleHRlbmRzIFJ4anMuT2JzZXJ2YWJsZTxhbnk+PiA9XG5cdFQgZXh0ZW5kcyBSeGpzLk9ic2VydmFibGU8aW5mZXIgVT4gPyBVXG5cdFx0OiB1bmtub3duXG5cdDtcblxuZXhwb3J0IHR5cGUgSVVucGFja0F4aW9zT2JzZXJ2YWJsZURhdGE8VCBleHRlbmRzIFJ4anMuT2JzZXJ2YWJsZTxhbnk+PiA9XG5cdFQgZXh0ZW5kcyBJQXhpb3NPYnNlcnZhYmxlPGluZmVyIFU+ID8gVVxuXHRcdDogVCBleHRlbmRzIFJ4anMuT2JzZXJ2YWJsZTxpbmZlciBVPiA/IFVcblx0XHQ6IHVua25vd25cblx0O1xuXG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlT2JzZXJ2YWJsZTxUIGV4dGVuZHMgUnhqcy5PYnNlcnZhYmxlPGFueT4+KG9iOiBULFxuXHRvYnNlcnZlcj86IFBhcnRpYWxPYnNlcnZlcjxJVW5wYWNrT2JzZXJ2YWJsZURhdGE8VD4+LFxuKVxue1xuXHRyZXR1cm4gb2Iuc3Vic2NyaWJlKGNyZWF0ZU9ic2VydmVyPElVbnBhY2tPYnNlcnZhYmxlRGF0YTxUPj4ob2JzZXJ2ZXIpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVPYnNlcnZhYmxlPFQgZXh0ZW5kcyBSeGpzLk9ic2VydmFibGU8YW55Pj4ob2I6IFQsXG5cdG9ic2VydmVyPzogUGFydGlhbE9ic2VydmVyPElVbnBhY2tPYnNlcnZhYmxlRGF0YTxUPj4sXG4pXG57XG5cdHJldHVybiBCbHVlYmlyZC5yZXNvbHZlKG9iKVxuXHRcdC50aGVuKGZ1bmN0aW9uIChvYilcblx0XHR7XG5cdFx0XHRyZXR1cm4gc3Vic2NyaWJlT2JzZXJ2YWJsZShvYiwgb2JzZXJ2ZXIpXG5cdFx0fSlcblx0XHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGV4cG9ydHMgYXMgdHlwZW9mIGltcG9ydCgnLi91dGlsJyk7XG4iXX0=