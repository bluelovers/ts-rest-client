"use strict";
/**
 * Created by user on 2019/5/12.
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const url_1 = require("url");
const Bluebird = require("bluebird");
const util = require("util");
function urlNormalize(input) {
    if (typeof input === 'string') {
        return new URL(input).href;
    }
    else if (typeof input.href !== 'string') {
        throw new TypeError(`input not string | URL`);
    }
    return input.href;
}
exports.urlNormalize = urlNormalize;
function urlResolve(input, base) {
    if (typeof input !== 'string') {
        throw new TypeError(`input not string | URL`);
    }
    if (base == null) {
        return urlNormalize(input);
    }
    return url_1.resolve(urlNormalize(base), input);
}
exports.urlResolve = urlResolve;
var EnumRestClientMetadata;
(function (EnumRestClientMetadata) {
    EnumRestClientMetadata["PARAM_PATH"] = "Path";
    EnumRestClientMetadata["PARAM_QUERY"] = "Query";
    EnumRestClientMetadata["PARAM_BODY"] = "Body";
    EnumRestClientMetadata["PARAM_HEADER"] = "Header";
    EnumRestClientMetadata["METHOD_GET"] = "GET";
    EnumRestClientMetadata["METHOD_POST"] = "POST";
    EnumRestClientMetadata["METHOD_PUT"] = "PUT";
    EnumRestClientMetadata["METHOD_PATCH"] = "PATCH";
    EnumRestClientMetadata["METHOD_DELETE"] = "DELETE";
    EnumRestClientMetadata["METHOD_HEAD"] = "HEAD";
    EnumRestClientMetadata["METHOD"] = "METHOD";
    EnumRestClientMetadata["BASE_URL"] = "BASE_URL";
    EnumRestClientMetadata["DEFAULT_HEADERS"] = "DEFAULT_HEADERS";
    EnumRestClientMetadata["HTTP_CLIENT"] = "HTTP_CLIENT";
    EnumRestClientMetadata["REQUEST_INTERCEPTOR"] = "REQUEST_INTERCEPTOR";
})(EnumRestClientMetadata = exports.EnumRestClientMetadata || (exports.EnumRestClientMetadata = {}));
exports.SymbolBaseUrl = Symbol("BASE_URL" /* BASE_URL */);
exports.SymbolDefaultHeaders = Symbol("DEFAULT_HEADERS" /* DEFAULT_HEADERS */);
exports.SymbolHttpClient = Symbol("HTTP_CLIENT" /* HTTP_CLIENT */);
exports.SymbolRequestInterceptor = Symbol("REQUEST_INTERCEPTOR" /* REQUEST_INTERCEPTOR */);
function standardQueryEncoding(v) {
    return encodeURIComponent(v);
}
exports.standardQueryEncoding = standardQueryEncoding;
function createObserver(observer, log = console) {
    return {
        next(data) {
            log.debug('Next: %s', util.inspect(data));
        },
        error(err) {
            log.debug('Error: %s', util.inspect(err));
        },
        complete() {
            log.debug('Completed');
        },
        ...observer,
    };
}
exports.createObserver = createObserver;
function subscribeObservable(ob) {
    return ob.subscribe(createObserver());
}
exports.subscribeObservable = subscribeObservable;
function resolveObservable(ob) {
    return Bluebird.resolve(ob)
        .then(subscribeObservable);
}
exports.resolveObservable = resolveObservable;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILDRCQUEwQjtBQUMxQiw2QkFBOEM7QUFDOUMscUNBQXNDO0FBQ3RDLDZCQUE4QjtBQVM5QixTQUFnQixZQUFZLENBQUMsS0FBbUI7SUFFL0MsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQzdCO1FBQ0MsT0FBTyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUE7S0FDMUI7U0FDSSxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQ3ZDO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0tBQzdDO0lBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFBO0FBQ2xCLENBQUM7QUFaRCxvQ0FZQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxLQUFhLEVBQUUsSUFBbUI7SUFFNUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQzdCO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0tBQzdDO0lBRUQsSUFBSSxJQUFJLElBQUksSUFBSSxFQUNoQjtRQUNDLE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQzFCO0lBRUQsT0FBTyxhQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFiRCxnQ0FhQztBQUVELElBQWtCLHNCQXNCakI7QUF0QkQsV0FBa0Isc0JBQXNCO0lBRXZDLDZDQUFtQixDQUFBO0lBQ25CLCtDQUFxQixDQUFBO0lBQ3JCLDZDQUFtQixDQUFBO0lBQ25CLGlEQUF1QixDQUFBO0lBRXZCLDRDQUFrQixDQUFBO0lBQ2xCLDhDQUFvQixDQUFBO0lBQ3BCLDRDQUFrQixDQUFBO0lBQ2xCLGdEQUFzQixDQUFBO0lBQ3RCLGtEQUF3QixDQUFBO0lBQ3hCLDhDQUFvQixDQUFBO0lBRXBCLDJDQUFpQixDQUFBO0lBQ2pCLCtDQUFxQixDQUFBO0lBRXJCLDZEQUFtQyxDQUFBO0lBRW5DLHFEQUEyQixDQUFBO0lBQzNCLHFFQUEyQyxDQUFBO0FBRTVDLENBQUMsRUF0QmlCLHNCQUFzQixHQUF0Qiw4QkFBc0IsS0FBdEIsOEJBQXNCLFFBc0J2QztBQUVZLFFBQUEsYUFBYSxHQUFHLE1BQU0sMkJBQWlDLENBQUM7QUFDeEQsUUFBQSxvQkFBb0IsR0FBRyxNQUFNLHlDQUF3QyxDQUFDO0FBQ3RFLFFBQUEsZ0JBQWdCLEdBQUcsTUFBTSxpQ0FBb0MsQ0FBQztBQUM5RCxRQUFBLHdCQUF3QixHQUFHLE1BQU0saURBQTRDLENBQUM7QUFFM0YsU0FBZ0IscUJBQXFCLENBQUMsQ0FBUztJQUU5QyxPQUFPLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFIRCxzREFHQztBQUVELFNBQWdCLGNBQWMsQ0FBbUMsUUFBNkIsRUFBRSxHQUFHLEdBQUcsT0FBTztJQUU1RyxPQUFPO1FBQ04sSUFBSSxDQUFDLElBQU87WUFFWCxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUNELEtBQUssQ0FBQyxHQUFNO1lBRVgsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFDRCxRQUFRO1lBRVAsR0FBRyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4QixDQUFDO1FBQ0QsR0FBRyxRQUFRO0tBQ1gsQ0FBQTtBQUNGLENBQUM7QUFqQkQsd0NBaUJDO0FBUUQsU0FBZ0IsbUJBQW1CLENBQWlDLEVBQUs7SUFFeEUsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBNEIsQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFIRCxrREFHQztBQUVELFNBQWdCLGlCQUFpQixDQUFpQyxFQUFLO0lBRXRFLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7U0FDekIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQ3pCO0FBQ0gsQ0FBQztBQUxELDhDQUtDO0FBRUQsa0JBQWUsT0FBa0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNS8xMi5cbiAqL1xuXG5pbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuaW1wb3J0IHsgcmVzb2x2ZSBhcyBfdXJsX3Jlc29sdmUgfSBmcm9tICd1cmwnO1xuaW1wb3J0IEJsdWViaXJkID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbmltcG9ydCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuaW1wb3J0IHsgSUF4aW9zT2JzZXJ2YWJsZSB9IGZyb20gJy4vYXhpb3MnO1xuaW1wb3J0IHsgT2JzZXJ2ZXIsIFBhcnRpYWxPYnNlcnZlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IFJ4anMgPSByZXF1aXJlKCdyeGpzJyk7XG5cbmV4cG9ydCB7IE9ic2VydmVyLCBQYXJ0aWFsT2JzZXJ2ZXIgfVxuXG5leHBvcnQgdHlwZSBJQmx1ZWJpcmQgPSB0eXBlb2YgQmx1ZWJpcmQ7XG5cbmV4cG9ydCBmdW5jdGlvbiB1cmxOb3JtYWxpemUoaW5wdXQ6IHN0cmluZyB8IFVSTCk6IHN0cmluZ1xue1xuXHRpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJylcblx0e1xuXHRcdHJldHVybiBuZXcgVVJMKGlucHV0KS5ocmVmXG5cdH1cblx0ZWxzZSBpZiAodHlwZW9mIGlucHV0LmhyZWYgIT09ICdzdHJpbmcnKVxuXHR7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgaW5wdXQgbm90IHN0cmluZyB8IFVSTGApXG5cdH1cblxuXHRyZXR1cm4gaW5wdXQuaHJlZlxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXJsUmVzb2x2ZShpbnB1dDogc3RyaW5nLCBiYXNlPzogc3RyaW5nIHwgVVJMKTogc3RyaW5nXG57XG5cdGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKVxuXHR7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgaW5wdXQgbm90IHN0cmluZyB8IFVSTGApXG5cdH1cblxuXHRpZiAoYmFzZSA9PSBudWxsKVxuXHR7XG5cdFx0cmV0dXJuIHVybE5vcm1hbGl6ZShpbnB1dClcblx0fVxuXG5cdHJldHVybiBfdXJsX3Jlc29sdmUodXJsTm9ybWFsaXplKGJhc2UpLCBpbnB1dCk7XG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIEVudW1SZXN0Q2xpZW50TWV0YWRhdGFcbntcblx0UEFSQU1fUEFUSCA9ICdQYXRoJyxcblx0UEFSQU1fUVVFUlkgPSAnUXVlcnknLFxuXHRQQVJBTV9CT0RZID0gJ0JvZHknLFxuXHRQQVJBTV9IRUFERVIgPSAnSGVhZGVyJyxcblxuXHRNRVRIT0RfR0VUID0gJ0dFVCcsXG5cdE1FVEhPRF9QT1NUID0gJ1BPU1QnLFxuXHRNRVRIT0RfUFVUID0gJ1BVVCcsXG5cdE1FVEhPRF9QQVRDSCA9ICdQQVRDSCcsXG5cdE1FVEhPRF9ERUxFVEUgPSAnREVMRVRFJyxcblx0TUVUSE9EX0hFQUQgPSAnSEVBRCcsXG5cblx0TUVUSE9EID0gJ01FVEhPRCcsXG5cdEJBU0VfVVJMID0gJ0JBU0VfVVJMJyxcblxuXHRERUZBVUxUX0hFQURFUlMgPSAnREVGQVVMVF9IRUFERVJTJyxcblxuXHRIVFRQX0NMSUVOVCA9ICdIVFRQX0NMSUVOVCcsXG5cdFJFUVVFU1RfSU5URVJDRVBUT1IgPSAnUkVRVUVTVF9JTlRFUkNFUFRPUicsXG5cbn1cblxuZXhwb3J0IGNvbnN0IFN5bWJvbEJhc2VVcmwgPSBTeW1ib2woRW51bVJlc3RDbGllbnRNZXRhZGF0YS5CQVNFX1VSTCk7XG5leHBvcnQgY29uc3QgU3ltYm9sRGVmYXVsdEhlYWRlcnMgPSBTeW1ib2woRW51bVJlc3RDbGllbnRNZXRhZGF0YS5ERUZBVUxUX0hFQURFUlMpO1xuZXhwb3J0IGNvbnN0IFN5bWJvbEh0dHBDbGllbnQgPSBTeW1ib2woRW51bVJlc3RDbGllbnRNZXRhZGF0YS5IVFRQX0NMSUVOVCk7XG5leHBvcnQgY29uc3QgU3ltYm9sUmVxdWVzdEludGVyY2VwdG9yID0gU3ltYm9sKEVudW1SZXN0Q2xpZW50TWV0YWRhdGEuUkVRVUVTVF9JTlRFUkNFUFRPUik7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFuZGFyZFF1ZXJ5RW5jb2Rpbmcodjogc3RyaW5nKTogc3RyaW5nXG57XG5cdHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPYnNlcnZlcjxULCBFIGV4dGVuZHMgRXJyb3IgfCBhbnkgPSBFcnJvcj4ob2JzZXJ2ZXI/OiBQYXJ0aWFsT2JzZXJ2ZXI8VD4sIGxvZyA9IGNvbnNvbGUpOiBPYnNlcnZlcjxUPlxue1xuXHRyZXR1cm4ge1xuXHRcdG5leHQoZGF0YTogVClcblx0XHR7XG5cdFx0XHRsb2cuZGVidWcoJ05leHQ6ICVzJywgdXRpbC5pbnNwZWN0KGRhdGEpKTtcblx0XHR9LFxuXHRcdGVycm9yKGVycjogRSlcblx0XHR7XG5cdFx0XHRsb2cuZGVidWcoJ0Vycm9yOiAlcycsIHV0aWwuaW5zcGVjdChlcnIpKTtcblx0XHR9LFxuXHRcdGNvbXBsZXRlKClcblx0XHR7XG5cdFx0XHRsb2cuZGVidWcoJ0NvbXBsZXRlZCcpO1xuXHRcdH0sXG5cdFx0Li4ub2JzZXJ2ZXIsXG5cdH1cbn1cblxuZXhwb3J0IHR5cGUgSVVucGFja09ic2VydmFibGVEYXRhPFQgZXh0ZW5kcyBSeGpzLk9ic2VydmFibGU8YW55Pj4gPVxuXHRUIGV4dGVuZHMgSUF4aW9zT2JzZXJ2YWJsZTxpbmZlciBVPiA/IFVcblx0OiBUIGV4dGVuZHMgUnhqcy5PYnNlcnZhYmxlPGluZmVyIFU+ID8gVVxuXHRcdDogdW5rbm93blxuO1xuXG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlT2JzZXJ2YWJsZTxUIGV4dGVuZHMgUnhqcy5PYnNlcnZhYmxlPGFueT4+KG9iOiBUKVxue1xuXHRyZXR1cm4gb2Iuc3Vic2NyaWJlKGNyZWF0ZU9ic2VydmVyPElVbnBhY2tPYnNlcnZhYmxlRGF0YTxUPj4oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlT2JzZXJ2YWJsZTxUIGV4dGVuZHMgUnhqcy5PYnNlcnZhYmxlPGFueT4+KG9iOiBUKVxue1xuXHRyZXR1cm4gQmx1ZWJpcmQucmVzb2x2ZShvYilcblx0XHQudGhlbihzdWJzY3JpYmVPYnNlcnZhYmxlKVxuXHRcdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0cyBhcyB0eXBlb2YgaW1wb3J0KCcuL3V0aWwnKTtcbiJdfQ==