"use strict";
/**
 * Created by user on 2019/5/12.
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const url_1 = require("url");
const Bluebird = require("bluebird");
const util = require("util");
function urlNormalize(input) {
    if (typeof input === 'string') {
        return new URL(input).href;
    }
    else if (typeof input.href !== 'string') {
        throw new TypeError(`input not string | URL`);
    }
    return input.href;
}
exports.urlNormalize = urlNormalize;
function urlResolve(input, base) {
    if (typeof input !== 'string') {
        throw new TypeError(`input not string | URL`);
    }
    if (base == null) {
        return urlNormalize(input);
    }
    return url_1.resolve(urlNormalize(base), input);
}
exports.urlResolve = urlResolve;
var EnumRestClientMetadata;
(function (EnumRestClientMetadata) {
    EnumRestClientMetadata["PARAM_PATH"] = "Path";
    EnumRestClientMetadata["PARAM_QUERY"] = "Query";
    EnumRestClientMetadata["PARAM_BODY"] = "Body";
    EnumRestClientMetadata["PARAM_HEADER"] = "Header";
    EnumRestClientMetadata["METHOD_GET"] = "GET";
    EnumRestClientMetadata["METHOD_POST"] = "POST";
    EnumRestClientMetadata["METHOD_PUT"] = "PUT";
    EnumRestClientMetadata["METHOD_PATCH"] = "PATCH";
    EnumRestClientMetadata["METHOD_DELETE"] = "DELETE";
    EnumRestClientMetadata["METHOD_HEAD"] = "HEAD";
    EnumRestClientMetadata["METHOD"] = "METHOD";
    EnumRestClientMetadata["BASE_URL"] = "BASE_URL";
    EnumRestClientMetadata["DEFAULT_HEADERS"] = "DEFAULT_HEADERS";
    EnumRestClientMetadata["HTTP_CLIENT"] = "HTTP_CLIENT";
    EnumRestClientMetadata["REQUEST_INTERCEPTOR"] = "REQUEST_INTERCEPTOR";
})(EnumRestClientMetadata = exports.EnumRestClientMetadata || (exports.EnumRestClientMetadata = {}));
exports.SymbolBaseUrl = Symbol("BASE_URL" /* BASE_URL */);
exports.SymbolDefaultHeaders = Symbol("DEFAULT_HEADERS" /* DEFAULT_HEADERS */);
exports.SymbolHttpClient = Symbol("HTTP_CLIENT" /* HTTP_CLIENT */);
exports.SymbolRequestInterceptor = Symbol("REQUEST_INTERCEPTOR" /* REQUEST_INTERCEPTOR */);
function standardQueryEncoding(v) {
    return encodeURIComponent(v);
}
exports.standardQueryEncoding = standardQueryEncoding;
function subscribeObservable(ob) {
    return Bluebird.resolve(ob)
        //.tap(r => console.dir(r))
        .then(function (ob) {
        return ob.subscribe(function (x) {
            console.log('Next: %s', util.inspect(x.data));
        }, function (err) {
            console.log('Error: %s', util.inspect(err));
        }, function () {
            console.log('Completed');
        });
    });
}
exports.subscribeObservable = subscribeObservable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILDRCQUEwQjtBQUMxQiw2QkFBOEM7QUFDOUMscUNBQXNDO0FBQ3RDLDZCQUE4QjtBQU05QixTQUFnQixZQUFZLENBQUMsS0FBbUI7SUFFL0MsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQzdCO1FBQ0MsT0FBTyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUE7S0FDMUI7U0FDSSxJQUFJLE9BQU8sS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQ3ZDO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0tBQzdDO0lBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFBO0FBQ2xCLENBQUM7QUFaRCxvQ0FZQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxLQUFhLEVBQUUsSUFBbUI7SUFFNUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQzdCO1FBQ0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO0tBQzdDO0lBRUQsSUFBSSxJQUFJLElBQUksSUFBSSxFQUNoQjtRQUNDLE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO0tBQzFCO0lBRUQsT0FBTyxhQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUFiRCxnQ0FhQztBQUVELElBQWtCLHNCQXNCakI7QUF0QkQsV0FBa0Isc0JBQXNCO0lBRXZDLDZDQUFtQixDQUFBO0lBQ25CLCtDQUFxQixDQUFBO0lBQ3JCLDZDQUFtQixDQUFBO0lBQ25CLGlEQUF1QixDQUFBO0lBRXZCLDRDQUFrQixDQUFBO0lBQ2xCLDhDQUFvQixDQUFBO0lBQ3BCLDRDQUFrQixDQUFBO0lBQ2xCLGdEQUFzQixDQUFBO0lBQ3RCLGtEQUF3QixDQUFBO0lBQ3hCLDhDQUFvQixDQUFBO0lBRXBCLDJDQUFpQixDQUFBO0lBQ2pCLCtDQUFxQixDQUFBO0lBRXJCLDZEQUFtQyxDQUFBO0lBRW5DLHFEQUEyQixDQUFBO0lBQzNCLHFFQUEyQyxDQUFBO0FBRTVDLENBQUMsRUF0QmlCLHNCQUFzQixHQUF0Qiw4QkFBc0IsS0FBdEIsOEJBQXNCLFFBc0J2QztBQUVZLFFBQUEsYUFBYSxHQUFHLE1BQU0sMkJBQWlDLENBQUM7QUFDeEQsUUFBQSxvQkFBb0IsR0FBRyxNQUFNLHlDQUF3QyxDQUFDO0FBQ3RFLFFBQUEsZ0JBQWdCLEdBQUcsTUFBTSxpQ0FBb0MsQ0FBQztBQUM5RCxRQUFBLHdCQUF3QixHQUFHLE1BQU0saURBQTRDLENBQUM7QUFFM0YsU0FBZ0IscUJBQXFCLENBQUMsQ0FBUztJQUU5QyxPQUFPLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFIRCxzREFHQztBQUVELFNBQWdCLG1CQUFtQixDQUFpQyxFQUFLO0lBRXhFLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7UUFDMUIsMkJBQTJCO1NBQzFCLElBQUksQ0FBQyxVQUFVLEVBQUU7UUFFakIsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztZQUU3QixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQy9DLENBQUMsRUFDRCxVQUFVLEdBQUc7WUFFWixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0MsQ0FBQyxFQUNEO1lBRUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQ0QsQ0FBQTtJQUNGLENBQUMsQ0FBQyxDQUNEO0FBQ0gsQ0FBQztBQXJCRCxrREFxQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE5LzUvMTIuXG4gKi9cblxuaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcbmltcG9ydCB7IHJlc29sdmUgYXMgX3VybF9yZXNvbHZlIH0gZnJvbSAndXJsJztcbmltcG9ydCBCbHVlYmlyZCA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5pbXBvcnQgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbmltcG9ydCB7IEF4aW9zT2JzZXJ2YWJsZSB9IGZyb20gJ2F4aW9zLW9ic2VydmFibGUvZGlzdC9heGlvcy1vYnNlcnZhYmxlLmludGVyZmFjZSc7XG5leHBvcnQgeyBBeGlvc09ic2VydmFibGUgYXMgT2JzZXJ2YWJsZSB9IGZyb20gJ2F4aW9zLW9ic2VydmFibGUvZGlzdC9heGlvcy1vYnNlcnZhYmxlLmludGVyZmFjZSc7XG5cbmV4cG9ydCB0eXBlIElCbHVlYmlyZCA9IHR5cGVvZiBCbHVlYmlyZDtcblxuZXhwb3J0IGZ1bmN0aW9uIHVybE5vcm1hbGl6ZShpbnB1dDogc3RyaW5nIHwgVVJMKTogc3RyaW5nXG57XG5cdGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKVxuXHR7XG5cdFx0cmV0dXJuIG5ldyBVUkwoaW5wdXQpLmhyZWZcblx0fVxuXHRlbHNlIGlmICh0eXBlb2YgaW5wdXQuaHJlZiAhPT0gJ3N0cmluZycpXG5cdHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBpbnB1dCBub3Qgc3RyaW5nIHwgVVJMYClcblx0fVxuXG5cdHJldHVybiBpbnB1dC5ocmVmXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cmxSZXNvbHZlKGlucHV0OiBzdHJpbmcsIGJhc2U/OiBzdHJpbmcgfCBVUkwpOiBzdHJpbmdcbntcblx0aWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpXG5cdHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBpbnB1dCBub3Qgc3RyaW5nIHwgVVJMYClcblx0fVxuXG5cdGlmIChiYXNlID09IG51bGwpXG5cdHtcblx0XHRyZXR1cm4gdXJsTm9ybWFsaXplKGlucHV0KVxuXHR9XG5cblx0cmV0dXJuIF91cmxfcmVzb2x2ZSh1cmxOb3JtYWxpemUoYmFzZSksIGlucHV0KTtcbn1cblxuZXhwb3J0IGNvbnN0IGVudW0gRW51bVJlc3RDbGllbnRNZXRhZGF0YVxue1xuXHRQQVJBTV9QQVRIID0gJ1BhdGgnLFxuXHRQQVJBTV9RVUVSWSA9ICdRdWVyeScsXG5cdFBBUkFNX0JPRFkgPSAnQm9keScsXG5cdFBBUkFNX0hFQURFUiA9ICdIZWFkZXInLFxuXG5cdE1FVEhPRF9HRVQgPSAnR0VUJyxcblx0TUVUSE9EX1BPU1QgPSAnUE9TVCcsXG5cdE1FVEhPRF9QVVQgPSAnUFVUJyxcblx0TUVUSE9EX1BBVENIID0gJ1BBVENIJyxcblx0TUVUSE9EX0RFTEVURSA9ICdERUxFVEUnLFxuXHRNRVRIT0RfSEVBRCA9ICdIRUFEJyxcblxuXHRNRVRIT0QgPSAnTUVUSE9EJyxcblx0QkFTRV9VUkwgPSAnQkFTRV9VUkwnLFxuXG5cdERFRkFVTFRfSEVBREVSUyA9ICdERUZBVUxUX0hFQURFUlMnLFxuXG5cdEhUVFBfQ0xJRU5UID0gJ0hUVFBfQ0xJRU5UJyxcblx0UkVRVUVTVF9JTlRFUkNFUFRPUiA9ICdSRVFVRVNUX0lOVEVSQ0VQVE9SJyxcblxufVxuXG5leHBvcnQgY29uc3QgU3ltYm9sQmFzZVVybCA9IFN5bWJvbChFbnVtUmVzdENsaWVudE1ldGFkYXRhLkJBU0VfVVJMKTtcbmV4cG9ydCBjb25zdCBTeW1ib2xEZWZhdWx0SGVhZGVycyA9IFN5bWJvbChFbnVtUmVzdENsaWVudE1ldGFkYXRhLkRFRkFVTFRfSEVBREVSUyk7XG5leHBvcnQgY29uc3QgU3ltYm9sSHR0cENsaWVudCA9IFN5bWJvbChFbnVtUmVzdENsaWVudE1ldGFkYXRhLkhUVFBfQ0xJRU5UKTtcbmV4cG9ydCBjb25zdCBTeW1ib2xSZXF1ZXN0SW50ZXJjZXB0b3IgPSBTeW1ib2woRW51bVJlc3RDbGllbnRNZXRhZGF0YS5SRVFVRVNUX0lOVEVSQ0VQVE9SKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YW5kYXJkUXVlcnlFbmNvZGluZyh2OiBzdHJpbmcpOiBzdHJpbmdcbntcblx0cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZU9ic2VydmFibGU8VCBleHRlbmRzIEF4aW9zT2JzZXJ2YWJsZTxhbnk+PihvYjogVClcbntcblx0cmV0dXJuIEJsdWViaXJkLnJlc29sdmUob2IpXG5cdFx0Ly8udGFwKHIgPT4gY29uc29sZS5kaXIocikpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKG9iKVxuXHRcdHtcblx0XHRcdHJldHVybiBvYi5zdWJzY3JpYmUoZnVuY3Rpb24gKHgpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnTmV4dDogJXMnLCB1dGlsLmluc3BlY3QoeC5kYXRhKSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGZ1bmN0aW9uIChlcnIpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnRXJyb3I6ICVzJywgdXRpbC5pbnNwZWN0KGVycikpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRmdW5jdGlvbiAoKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ0NvbXBsZXRlZCcpO1xuXHRcdFx0XHR9XG5cdFx0XHQpXG5cdFx0fSlcblx0XHQ7XG59XG4iXX0=